#!/usr/bin/env python3
"""
Script para sincronizar labels em reposit√≥rios GitHub.
Pode sincronizar todos os reposit√≥rios de uma organiza√ß√£o ou um reposit√≥rio espec√≠fico.
"""

import requests
import csv
import yaml
import os
import time
import argparse
from datetime import datetime

# Configura√ß√µes padr√£o
organization = 'splor-mg'
repos_file = 'docs/repos_list.csv'
labels_file = 'docs/labels.yaml'

def parse_arguments():
    """Parse command line arguments"""
    parser = argparse.ArgumentParser(
        description="Sincroniza labels em reposit√≥rios GitHub",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Exemplos de uso:
  python labels_sync.py                    # Sincroniza todos os reposit√≥rios da organiza√ß√£o
  python labels_sync.py --repos repo1,repo2  # Sincroniza reposit√≥rios espec√≠ficos
  python labels_sync.py --org nova-org    # Usa organiza√ß√£o diferente
  python labels_sync.py --delete-extras   # Remove labels extras para sincroniza√ß√£o completa
        """
    )
    
    parser.add_argument('--repos', 
                       help='Reposit√≥rios espec√≠ficos (CSV ou lista separada por v√≠rgula)')
    parser.add_argument('--org', 
                       help='Organiza√ß√£o para sincronizar (padr√£o: splor-mg)')
    parser.add_argument('--delete-extras', 
                       action='store_true',
                       help='Remove labels extras para manter 100% sincronizado')
    parser.add_argument('--labels', 
                       help='Arquivo YAML com labels (padr√£o: docs/labels.yaml)')
    
    return parser.parse_args()

def load_env():
    """Carrega vari√°veis de ambiente do arquivo .env"""
    env_file = '.env'
    if os.path.exists(env_file):
        print(f"üìÅ Carregando vari√°veis de {env_file}...")
        with open(env_file, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    os.environ[key] = value
        print("‚úÖ Vari√°veis de ambiente carregadas")
    else:
        print(f"‚ö†Ô∏è  Arquivo {env_file} n√£o encontrado")

def load_repos(repos_input, organization):
    """Carrega reposit√≥rios de CSV ou lista separada por v√≠rgula"""
    repos = []
    
    if ',' in repos_input:
        # Lista separada por v√≠rgula
        repo_names = [repo.strip() for repo in repos_input.split(',')]
        for repo_name in repo_names:
            # Remove org/ se presente
            if '/' in repo_name:
                repo_name = repo_name.split('/')[-1]
            repos.append({'name': repo_name, 'archived': False})
        print(f"üìã Carregando {len(repos)} reposit√≥rios da lista: {repos_input}")
    else:
        # Arquivo CSV
        csv_file = repos_input
        if not os.path.exists(csv_file):
            print(f"‚ùå Arquivo {csv_file} n√£o encontrado!")
            print("üí° Execute primeiro o script repos_list.py para gerar a lista")
            return repos
        
        print(f"üìã Carregando reposit√≥rios de {csv_file}...")
        
        with open(csv_file, 'r', encoding='utf-8') as f:
            reader = csv.DictReader(f)
            for row in reader:
                repos.append({'name': row['name'], 'archived': row.get('archived', 'False') == 'True'})
    
    print(f"‚úÖ {len(repos)} reposit√≥rios carregados")
    return repos

def load_repos_from_csv(csv_file):
    """Carrega a lista de reposit√≥rios do arquivo CSV"""
    repos = []
    
    if not os.path.exists(csv_file):
        print(f"‚ùå Arquivo {csv_file} n√£o encontrado!")
        print("üí° Execute primeiro o script repos_list.py para gerar a lista")
        return repos
    
    print(f"üìã Carregando reposit√≥rios de {csv_file}...")
    
    with open(csv_file, 'r', encoding='utf-8') as f:
        reader = csv.DictReader(f)
        for row in reader:
            repos.append({'name': row['name'], 'archived': row.get('archived', 'False') == 'True'})
    
    print(f"‚úÖ {len(repos)} reposit√≥rios carregados")
    return repos

def load_labels_from_yaml(yaml_file):
    """Carrega as labels do arquivo YAML"""
    labels = []
    
    if not os.path.exists(yaml_file):
        print(f"‚ùå Arquivo {yaml_file} n√£o encontrado!")
        return labels
    
    print(f"üè∑Ô∏è  Carregando labels de {yaml_file}...")
    
    try:
        with open(yaml_file, 'r', encoding='utf-8') as f:
            data = yaml.safe_load(f)
            if data and 'labels' in data:
                labels = data['labels']
                print(f"‚úÖ {len(labels)} labels carregadas")
            else:
                print("‚ö†Ô∏è  Nenhuma label encontrada no arquivo YAML")
    except yaml.YAMLError as e:
        print(f"‚ùå Erro ao ler arquivo YAML: {e}")
    
    return labels

def sync_labels_for_repo(repo_name, labels, token, organization, delete_extras=True):
    """Sincroniza labels para um reposit√≥rio espec√≠fico"""
    print(f"\nüîÑ Processando reposit√≥rio: {organization}/{repo_name}")
    
    headers = {
        'Accept': 'application/vnd.github.v3+json',
        'Authorization': f'token {token}'
    }
    
    success_count = 0
    error_count = 0
    deleted_count = 0
    
    # Primeiro, obter todas as labels atuais do reposit√≥rio
    print("  üìã Obtendo labels atuais do reposit√≥rio...")
    current_labels_url = f"https://api.github.com/repos/{organization}/{repo_name}/labels"
    
    try:
        current_response = requests.get(current_labels_url, headers=headers)
        if current_response.status_code == 200:
            current_labels = current_response.json()
            # Criar mapeamento case-insensitive das labels existentes
            current_labels_map = {}
            for label in current_labels:
                current_labels_map[label['name'].lower()] = {
                    'name': label['name'],
                    'color': label['color'],
                    'description': label.get('description', '')
                }
            print(f"    üìä {len(current_labels)} labels encontradas no reposit√≥rio")
        else:
            print(f"    ‚ùå Erro ao obter labels atuais: {current_response.status_code}")
            return 0, 0, 1
    except Exception as e:
        print(f"    ‚ùå Erro ao obter labels atuais: {e}")
        return 0, 0, 1
    
    # Processar cada label do template
    for label in labels:
        label_name = label['name']
        label_color = label['color']
        label_description = label.get('description', '')
        
        print(f"  üè∑Ô∏è  Processando label: {label_name}")
        
        # Verificar se a label j√° existe (case-insensitive)
        label_name_lower = label_name.lower()
        if label_name_lower in current_labels_map:
            existing_label = current_labels_map[label_name_lower]
            existing_name = existing_label['name']
            existing_color = existing_label['color']
            existing_description = existing_label['description']
            
            # Verificar se precisa atualizar (nome, cor ou descri√ß√£o)
            needs_update = (
                existing_name != label_name or
                existing_color != label_color or
                existing_description != label_description
            )
            
            if needs_update:
                # Log espec√≠fico para ajuste de formato
                if existing_name != label_name:
                    print(f"      üîÑ Ajustando formato do nome da label: '{existing_name}' ‚Üí '{label_name}'")
                
                # Atualizar label existente
                update_url = f"https://api.github.com/repos/{organization}/{repo_name}/labels/{existing_name}"
                update_data = {
                    'name': label_name,
                    'color': label_color,
                    'description': label_description
                }
                
                try:
                    response = requests.patch(update_url, headers=headers, json=update_data)
                    if response.status_code == 200:
                        print(f"      ‚úÖ Label '{label_name}' atualizada com sucesso")
                        success_count += 1
                    else:
                        print(f"      ‚ùå Erro ao atualizar label '{label_name}': {response.status_code}")
                        error_count += 1
                except Exception as e:
                    print(f"      ‚ùå Erro ao atualizar label '{label_name}': {e}")
                    error_count += 1
            else:
                print(f"      ‚úÖ Label '{label_name}' j√° est√° atualizada")
                success_count += 1
        else:
            # Criar nova label
            create_url = f"https://api.github.com/repos/{organization}/{repo_name}/labels"
            create_data = {
                'name': label_name,
                'color': label_color,
                'description': label_description
            }
            
            try:
                response = requests.post(create_url, headers=headers, json=create_data)
                if response.status_code == 201:
                    print(f"      ‚úÖ Label '{label_name}' criada com sucesso")
                    success_count += 1
                else:
                    print(f"      ‚ùå Erro ao criar label '{label_name}': {response.status_code}")
                    error_count += 1
            except Exception as e:
                print(f"      ‚ùå Erro ao criar label '{label_name}': {e}")
                error_count += 1
        
        # Pequena pausa para n√£o sobrecarregar a API
        time.sleep(0.1)
    
    # Remover labels extras se habilitado
    if delete_extras:
        print("  üóëÔ∏è  Verificando labels extras para remo√ß√£o...")
        
        # Obter labels que n√£o est√£o no template (case-insensitive)
        template_label_names_lower = {label['name'].lower() for label in labels}
        extra_labels = [name for name in current_labels_map.keys() if name not in template_label_names_lower]
        
        if extra_labels:
            print(f"    üìã {len(extra_labels)} labels extras encontradas para remo√ß√£o")
            
            for extra_label_name_lower in extra_labels:
                extra_label_name = current_labels_map[extra_label_name_lower]['name']
                delete_url = f"https://api.github.com/repos/{organization}/{repo_name}/labels/{extra_label_name}"
                
                try:
                    response = requests.delete(delete_url, headers=headers)
                    if response.status_code == 204:
                        print(f"      üóëÔ∏è  Label '{extra_label_name}' removida com sucesso")
                        deleted_count += 1
                    else:
                        print(f"      ‚ùå Erro ao remover label '{extra_label_name}': {response.status_code}")
                        error_count += 1
                    
                    # Pequena pausa para n√£o sobrecarregar a API
                    time.sleep(0.1)
                    
                except Exception as e:
                    print(f"      ‚ùå Erro ao remover label '{extra_label_name}': {e}")
                    error_count += 1
        else:
            print("    ‚úÖ Nenhuma label extra encontrada para remo√ß√£o")
    else:
        print("  ‚è≠Ô∏è  Remo√ß√£o de labels extras desabilitada")
    
    print(f"  üìä Resumo: {success_count} labels processadas, {deleted_count} deletadas, {error_count} erros")
    return success_count, deleted_count, error_count

def sync_single_repo(repo_full_name, labels, token, delete_extras=True):
    """Sincroniza labels para um reposit√≥rio espec√≠fico (formato: org/repo)"""
    if '/' not in repo_full_name:
        print(f"‚ùå Formato inv√°lido: {repo_full_name}. Use: org/repo")
        return False
    
    org, repo = repo_full_name.split('/', 1)
    print(f"üéØ Sincronizando reposit√≥rio espec√≠fico: {org}/{repo}")
    
    success, deleted, errors = sync_labels_for_repo(repo, labels, token, org, delete_extras)
    
    if errors == 0:
        print(f"‚úÖ Labels sincronizadas com sucesso para {org}/{repo}")
        return True
    else:
        print(f"‚ö†Ô∏è  Sincroniza√ß√£o conclu√≠da com {errors} erros para {org}/{repo}")
        return False

def main():
    # Parse arguments
    args = parse_arguments()
    
    # Carregar vari√°veis de ambiente
    load_env()
    
    # Obter token do GitHub
    github_token = os.getenv('GITHUB_TOKEN')
    
    if not github_token:
        print("‚ùå GITHUB_TOKEN n√£o encontrado!")
        print("üí° Certifique-se de que o arquivo .env cont√©m: GITHUB_TOKEN=seu_token_aqui")
        return
    
    print(f"üîë Usando token: {github_token[:8]}...")
    
    # Configurar par√¢metros baseado nos argumentos
    if args.org:
        organization = args.org
    if args.labels:
        labels_file = args.labels
    
    # Carregar labels
    labels = load_labels_from_yaml(labels_file)
    if not labels:
        return
    
    # Se foi especificado reposit√≥rios espec√≠ficos
    if args.repos:
        repos = load_repos(args.repos, organization)
        if not repos:
            return
        print(f"üéØ Sincronizando {len(repos)} reposit√≥rios espec√≠ficos")
    else:
        # Carregar reposit√≥rios do CSV padr√£o
        repos = load_repos(repos_file, organization)
        if not repos:
            return
    
    print(f"\nüöÄ Iniciando sincroniza√ß√£o de labels para {len(repos)} reposit√≥rios...")
    print("=" * 60)
    
    total_success = 0
    total_deleted = 0
    total_errors = 0
    
    # Processar cada reposit√≥rio
    for i, repo in enumerate(repos, 1):
        print(f"\nüìÅ Reposit√≥rio {i}/{len(repos)}")
        
        success, deleted, errors = sync_labels_for_repo(repo, labels, github_token, organization, args.delete_extras)
        total_success += success
        total_deleted += deleted
        total_errors += errors
        
        # Pausa entre reposit√≥rios para n√£o sobrecarregar a API
        if i < len(repos):
            print("  ‚è≥ Aguardando 2 segundos antes do pr√≥ximo reposit√≥rio...")
            time.sleep(2)
    
    # Resumo final
    print("\n" + "=" * 60)
    print("üéØ SINCRONIZA√á√ÉO CONCLU√çDA!")
    print(f"üìä Total de reposit√≥rios processados: {len(repos)}")
    print(f"‚úÖ Labels processadas com sucesso: {total_success}")
    print(f"üóëÔ∏è  Labels deletadas: {total_deleted}")
    print(f"‚ùå Erros encontrados: {total_errors}")
    
    if total_errors == 0:
        print("üéâ Todas as labels foram sincronizadas com sucesso!")
        if args.delete_extras and total_deleted > 0:
            print(f"üóëÔ∏è  {total_deleted} labels extras foram removidas para manter consist√™ncia")
        elif not args.delete_extras:
            print("üõ°Ô∏è  Modo conservador: labels extras foram preservadas")
    else:
        print("‚ö†Ô∏è  Algumas labels tiveram problemas. Verifique os logs acima.")
    
    print(f"\nüí° Verifique os reposit√≥rios em: https://github.com/{organization}")

if __name__ == "__main__":
    main()
