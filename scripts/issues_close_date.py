#!/usr/bin/env python3
"""
Script para gerenciar o campo "Data Fim" em projetos GitHub.

Este script verifica issues em reposit√≥rios e gerencia o campo "Data Fim" 
nos projetos especificados baseado no status do issue.

Regras de neg√≥cio:
- Se status != "Done": campo "Data Fim" deve estar vazio
- Se status == "Done" e campo vazio: preencher com data de fechamento do issue
- Se status == "Done" e campo preenchido: manter como est√°

Environment variables used:
- GITHUB_TOKEN: GitHub token with write access to Projects v2
- GITHUB_ORG: Organization login (default: splor-mg)

Usage:
  python scripts/issues_close_date.py
  python scripts/issues_close_date.py --projects "1,2,3"
  python scripts/issues_close_date.py --org "minha-org" --verbose
"""

from __future__ import annotations

import argparse
import csv
import datetime as dt
import json
import os
import sys
import time
from pathlib import Path
from typing import Any, Dict, List, Optional

import requests
import yaml

# Configura√ß√µes padr√£o
DEFAULT_ORG = 'splor-mg'
DEFAULT_REPOS_FILE = 'docs/repos_list.csv'
DEFAULT_PROJECTS_FILE = 'docs/projects-panels.yml'
DEFAULT_FIELD_NAME = 'Data Fim'

GITHUB_GRAPHQL_URL = "https://api.github.com/graphql"

def load_dotenv():
    """Carrega vari√°veis de ambiente do arquivo .env"""
    env_file = Path('.env')
    if env_file.exists():
        print(f"üìÅ Carregando vari√°veis de {env_file}...")
        with open(env_file, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    os.environ[key] = value
        print("‚úÖ Vari√°veis de ambiente carregadas")
    else:
        print(f"‚ö†Ô∏è  Arquivo {env_file} n√£o encontrado")

def _require_env(name: str) -> str:
    """Get required environment variable or raise error."""
    value = os.getenv(name)
    if not value:
        raise RuntimeError(f"Missing required environment variable: {name}")
    return value

def _graphql(token: str, query: str, variables: Dict[str, Any]) -> Dict[str, Any]:
    """Execute GraphQL query against GitHub API."""
    headers = {
        "Authorization": f"Bearer {token}",
        "Accept": "application/vnd.github+json",
    }
    resp = requests.post(
        GITHUB_GRAPHQL_URL, 
        json={"query": query, "variables": variables}, 
        headers=headers
    )
    if resp.status_code != 200:
        raise RuntimeError(f"GraphQL HTTP {resp.status_code}: {resp.text}")
    data = resp.json()
    if "errors" in data:
        raise RuntimeError(f"GraphQL errors: {json.dumps(data['errors'], ensure_ascii=False)}")
    return data["data"]

def _iso_date(date_str: str) -> str:
    """Return YYYY-MM-DD from an ISO datetime string."""
    try:
        # GitHub gives ISO 8601 like 2025-08-27T23:59:59Z
        d = dt.datetime.fromisoformat(date_str.replace("Z", "+00:00"))
        return d.date().isoformat()
    except Exception:
        # If already a date, return as-is
        return date_str[:10]

def load_repos_from_csv(csv_file: str) -> List[Dict[str, Any]]:
    """Carrega a lista de reposit√≥rios do arquivo CSV"""
    repos = []
    
    if not os.path.exists(csv_file):
        print(f"‚ùå Arquivo {csv_file} n√£o encontrado!")
        print("üí° Execute primeiro o script repos_list.py para gerar a lista")
        return repos
    
    print(f"üìã Carregando reposit√≥rios de {csv_file}...")
    
    with open(csv_file, 'r', encoding='utf-8') as f:
        reader = csv.DictReader(f)
        for row in reader:
            repos.append({
                'name': row['name'], 
                'archived': row.get('archived', 'False') == 'True'
            })
    
    print(f"‚úÖ {len(repos)} reposit√≥rios carregados")
    return repos

def load_projects_from_yaml(yaml_file: str) -> List[Dict[str, Any]]:
    """Carrega a lista de projetos do arquivo YAML"""
    projects = []
    
    if not os.path.exists(yaml_file):
        print(f"‚ùå Arquivo {yaml_file} n√£o encontrado!")
        return projects
    
    print(f"üìä Carregando projetos de {yaml_file}...")
    
    try:
        with open(yaml_file, 'r', encoding='utf-8') as f:
            data = yaml.safe_load(f)
            if data and 'projects' in data:
                projects = data['projects']
                print(f"‚úÖ {len(projects)} projetos carregados")
            else:
                print("‚ö†Ô∏è  Nenhum projeto encontrado no arquivo YAML")
    except yaml.YAMLError as e:
        print(f"‚ùå Erro ao ler arquivo YAML: {e}")
    
    return projects

def filter_projects_with_data_fim_field(projects: List[Dict[str, Any]], field_name: str = DEFAULT_FIELD_NAME) -> List[Dict[str, Any]]:
    """Filtra projetos que possuem o campo 'Data Fim'"""
    filtered_projects = []
    
    for project in projects:
        has_field = False
        for field in project.get('fields', []):
            if field.get('name', '').strip().lower() == field_name.strip().lower():
                has_field = True
                break
        
        if has_field:
            filtered_projects.append(project)
            print(f"  ‚úÖ Projeto '{project['name']}' (#{project['number']}) possui campo '{field_name}'")
        else:
            print(f"  ‚è≠Ô∏è  Projeto '{project['name']}' (#{project['number']}) n√£o possui campo '{field_name}'")
    
    return filtered_projects

def get_project_field_id(project: Dict[str, Any], field_name: str = DEFAULT_FIELD_NAME) -> Optional[str]:
    """Obt√©m o ID do campo especificado no projeto"""
    for field in project.get('fields', []):
        if field.get('name', '').strip().lower() == field_name.strip().lower():
            return field['id']
    return None

def get_issues_from_repo(token: str, org: str, repo_name: str) -> List[Dict[str, Any]]:
    """Obt√©m todos os issues de um reposit√≥rio"""
    query = """
    query($owner: String!, $repo: String!, $cursor: String) {
      repository(owner: $owner, name: $repo) {
        issues(first: 100, after: $cursor, states: [OPEN, CLOSED]) {
          nodes {
            id
            number
            title
            state
            closedAt
            projectItems(first: 50) {
              nodes {
                id
                project {
                  id
                  number
                  title
                }
                fieldValues(first: 50) {
                  nodes {
                    ... on ProjectV2ItemFieldSingleSelectValue {
                      field {
                        ... on ProjectV2FieldCommon {
                          name
                        }
                      }
                      name
                    }
                    ... on ProjectV2ItemFieldDateValue {
                      field {
                        ... on ProjectV2FieldCommon {
                          name
                        }
                      }
                      date
                    }
                  }
                }
              }
            }
          }
          pageInfo {
            hasNextPage
            endCursor
          }
        }
      }
    }
    """
    
    all_issues = []
    cursor = None
    
    while True:
        variables = {"owner": org, "repo": repo_name, "cursor": cursor}
        data = _graphql(token, query, variables)
        
        repository = data.get("repository")
        if not repository:
            break
            
        issues = repository.get("issues", {}).get("nodes", [])
        all_issues.extend(issues)
        
        page_info = repository.get("issues", {}).get("pageInfo", {})
        if not page_info.get("hasNextPage"):
            break
            
        cursor = page_info.get("endCursor")
    
    return all_issues

def get_project_item_status_and_date(project_item: Dict[str, Any], field_name: str = DEFAULT_FIELD_NAME) -> tuple[Optional[str], Optional[str]]:
    """Obt√©m o status e a data do campo especificado do item do projeto"""
    status = None
    date_value = None
    
    for field_value in project_item.get('fieldValues', {}).get('nodes', []):
        field = field_value.get('field', {})
        field_name_actual = field.get('name', '')
        
        if field_name_actual.strip().lower() == 'status':
            status = field_value.get('name')
        elif field_name_actual.strip().lower() == field_name.strip().lower():
            date_value = field_value.get('date')
    
    return status, date_value

def clear_date_field(token: str, project_id: str, item_id: str, field_id: str) -> bool:
    """Limpa o campo de data (define como null)"""
    mutation = """
    mutation($project: ID!, $item: ID!, $field: ID!) {
      updateProjectV2ItemFieldValue(
        input: {
          projectId: $project,
          itemId: $item,
          fieldId: $field,
          value: { date: null }
        }
      ) { clientMutationId }
    }
    """
    
    try:
        _graphql(token, mutation, {"project": project_id, "item": item_id, "field": field_id})
        return True
    except Exception as e:
        print(f"      ‚ùå Erro ao limpar campo: {e}")
        return False

def set_date_field(token: str, project_id: str, item_id: str, field_id: str, date_value: str) -> bool:
    """Define o campo de data com o valor especificado"""
    mutation = """
    mutation($project: ID!, $item: ID!, $field: ID!, $value: Date!) {
      updateProjectV2ItemFieldValue(
        input: {
          projectId: $project,
          itemId: $item,
          fieldId: $field,
          value: { date: $value }
        }
      ) { clientMutationId }
    }
    """
    
    try:
        _graphql(token, mutation, {
            "project": project_id, 
            "item": item_id, 
            "field": field_id, 
            "value": date_value
        })
        return True
    except Exception as e:
        print(f"      ‚ùå Erro ao definir campo: {e}")
        return False

def process_issue_for_projects(token: str, issue: Dict[str, Any], target_projects: List[Dict[str, Any]], 
                              field_name: str = DEFAULT_FIELD_NAME) -> Dict[str, int]:
    """Processa um issue para todos os projetos alvo"""
    changes = {"cleared": 0, "set": 0, "errors": 0}
    
    issue_number = issue.get('number')
    issue_title = issue.get('title', '')
    issue_state = issue.get('state')
    issue_closed_at = issue.get('closedAt')
    
    print(f"  üîç Processando issue #{issue_number}: {issue_title[:50]}...")
    
    # Para cada item do projeto associado ao issue
    for project_item in issue.get('projectItems', {}).get('nodes', []):
        project = project_item.get('project', {})
        project_id = project.get('id')
        project_number = project.get('number')
        project_title = project.get('title', '')
        
        # Verificar se este projeto est√° na lista de projetos alvo
        target_project = None
        for tp in target_projects:
            if tp.get('id') == project_id:
                target_project = tp
                break
        
        if not target_project:
            continue
        
        print(f"    üìã Projeto: {project_title} (#{project_number})")
        
        # Obter ID do campo "Data Fim"
        field_id = get_project_field_id(target_project, field_name)
        if not field_id:
            print(f"      ‚ö†Ô∏è  Campo '{field_name}' n√£o encontrado no projeto")
            continue
        
        # Obter status e valor atual do campo
        status, current_date = get_project_item_status_and_date(project_item, field_name)
        
        print(f"      üìä Status: {status}, Data atual: {current_date or 'vazio'}")
        
        # Aplicar regras de neg√≥cio
        if status and status.lower() != 'done':
            # Status != "Done": campo deve estar vazio
            if current_date:
                print(f"      üóëÔ∏è  Limpando campo '{field_name}' (status != Done)")
                if clear_date_field(token, project_id, project_item['id'], field_id):
                    changes["cleared"] += 1
                    print(f"      ‚úÖ Campo '{field_name}' limpo com sucesso")
                else:
                    changes["errors"] += 1
            else:
                print(f"      ‚úÖ Campo '{field_name}' j√° est√° vazio")
        
        elif status and status.lower() == 'done':
            # Status == "Done": campo deve ter data de fechamento
            if not current_date and issue_closed_at:
                date_value = _iso_date(issue_closed_at)
                print(f"      üìÖ Definindo campo '{field_name}' para {date_value} (status = Done)")
                if set_date_field(token, project_id, project_item['id'], field_id, date_value):
                    changes["set"] += 1
                    print(f"      ‚úÖ Campo '{field_name}' definido para {date_value}")
                else:
                    changes["errors"] += 1
            elif current_date:
                print(f"      ‚úÖ Campo '{field_name}' j√° est√° preenchido: {current_date}")
            else:
                print(f"      ‚ö†Ô∏è  Issue fechado mas sem data de fechamento")
    
    return changes

def parse_arguments():
    """Parse command line arguments"""
    parser = argparse.ArgumentParser(
        description="Gerencia o campo 'Data Fim' em projetos GitHub",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Exemplos de uso:
  python scripts/issues_close_date.py                               # Processa todos os projetos com campo 'Data Fim'
  python scripts/issues_close_date.py --projects "1,2,3"            # Processa apenas projetos espec√≠ficos
  python scripts/issues_close_date.py --org "minha-org"             # Usa organiza√ß√£o diferente
  python scripts/issues_close_date.py --field "Data Conclus√£o"      # Usa nome de campo diferente
  python scripts/issues_close_date.py --verbose                     # Modo verboso com mais detalhes
        """
    )
    
    parser.add_argument('--projects', 
                       help='Projetos espec√≠ficos (lista separada por v√≠rgula)')
    parser.add_argument('--org', 
                       help='Organiza√ß√£o para processar (padr√£o: splor-mg)')
    parser.add_argument('--field', 
                       default=DEFAULT_FIELD_NAME,
                       help=f'Nome do campo de data (padr√£o: {DEFAULT_FIELD_NAME})')
    parser.add_argument('--repos-file', 
                       default=DEFAULT_REPOS_FILE,
                       help=f'Arquivo CSV com lista de reposit√≥rios (padr√£o: {DEFAULT_REPOS_FILE})')
    parser.add_argument('--projects-file', 
                       default=DEFAULT_PROJECTS_FILE,
                       help=f'Arquivo YAML com lista de projetos (padr√£o: {DEFAULT_PROJECTS_FILE})')
    parser.add_argument('--verbose', '-v', 
                       action='store_true',
                       help='Modo verboso com mais detalhes')
    
    return parser.parse_args()

def main():
    """Fun√ß√£o principal"""
    args = parse_arguments()
    
    # Carregar vari√°veis de ambiente
    load_dotenv()
    
    # Obter token do GitHub
    github_token = os.getenv('GITHUB_TOKEN')
    
    if not github_token:
        print("‚ùå GITHUB_TOKEN n√£o encontrado!")
        print("üí° Certifique-se de que o arquivo .env cont√©m: GITHUB_TOKEN=seu_token_aqui")
        return

    print(f"üîë Usando token: {github_token[:8]}...")
    
    # Aplicar hierarquia de prioriza√ß√£o (argumentos > env vars > padr√µes)
    org = args.org or os.getenv("GITHUB_ORG") or DEFAULT_ORG
    
    # Mostrar configura√ß√µes aplicadas
    print(f"\nüîß Configura√ß√µes aplicadas:")
    print(f"   Organiza√ß√£o: {org}")
    print(f"   Arquivo de reposit√≥rios: {args.repos_file or DEFAULT_REPOS_FILE}")
    print(f"   Arquivo de projetos: {args.projects_file or DEFAULT_PROJECTS_FILE}")
    print(f"   Campo: {args.field}")
    
    # Mostrar qual valor foi aplicado e de onde veio
    if args.org:
        org_source = "argumento --org"
    elif os.getenv("GITHUB_ORG"):
        org_source = f"arquivo .env (GITHUB_ORG={os.getenv('GITHUB_ORG')})"
    else:
        org_source = f"valor padr√£o hardcoded (DEFAULT_ORG={DEFAULT_ORG})"
    
    print(f"   Fonte da organiza√ß√£o: {org_source}")
    
    if args.verbose:
        print(f"   Modo verboso ativado")
    
    try:
        # Carregar reposit√≥rios
        repos = load_repos_from_csv(args.repos_file)
        if not repos:
            print("‚ùå Nenhum reposit√≥rio encontrado para processar")
            return
        
        # Carregar projetos
        all_projects = load_projects_from_yaml(args.projects_file)
        if not all_projects:
            print("‚ùå Nenhum projeto encontrado para processar")
            return
        
        # Filtrar projetos que possuem o campo "Data Fim"
        print(f"\nüîç Filtrando projetos com campo '{args.field}'...")
        projects_with_field = filter_projects_with_data_fim_field(all_projects, args.field)
        
        if not projects_with_field:
            print(f"‚ùå Nenhum projeto encontrado com campo '{args.field}'")
            return
        
        # Filtrar projetos espec√≠ficos se especificado
        if args.projects:
            project_numbers = [int(p.strip()) for p in args.projects.split(',')]
            projects_with_field = [p for p in projects_with_field if p.get('number') in project_numbers]
            print(f"üéØ Filtrando para projetos espec√≠ficos: {project_numbers}")
        
        if not projects_with_field:
            print("‚ùå Nenhum projeto encontrado ap√≥s filtro espec√≠fico")
            return
        
        print(f"‚úÖ {len(projects_with_field)} projetos ser√£o processados")
        
        # Processar cada reposit√≥rio
        total_changes = {"cleared": 0, "set": 0, "errors": 0}
        
        for i, repo in enumerate(repos, 1):
            if repo.get('archived', False):
                print(f"\n‚è≠Ô∏è  Pulando reposit√≥rio arquivado: {repo['name']}")
                continue
            
            print(f"\nüìÅ Reposit√≥rio {i}/{len(repos)}: {repo['name']}")
            
            try:
                # Obter issues do reposit√≥rio
                issues = get_issues_from_repo(github_token, org, repo['name'])
                print(f"  üìã {len(issues)} issues encontrados")
                
                # Processar cada issue
                for issue in issues:
                    changes = process_issue_for_projects(
                        github_token, issue, projects_with_field, args.field
                    )
                    
                    # Acumular mudan√ßas
                    for key in total_changes:
                        total_changes[key] += changes[key]
                
                # Pausa entre reposit√≥rios para n√£o sobrecarregar a API
                if i < len(repos):
                    print("  ‚è≥ Aguardando 2 segundos antes do pr√≥ximo reposit√≥rio...")
                    time.sleep(2)
                    
            except Exception as e:
                print(f"‚ùå Erro ao processar reposit√≥rio {repo['name']}: {e}")
                total_changes["errors"] += 1
        
        # Resumo final
        print("\n" + "=" * 60)
        print("üéØ PROCESSAMENTO CONCLU√çDO!")
        print(f"üìä Total de reposit√≥rios processados: {len(repos)}")
        print(f"üìä Total de projetos processados: {len(projects_with_field)}")
        print(f"‚úÖ Campos limpos: {total_changes['cleared']}")
        print(f"üìÖ Campos preenchidos: {total_changes['set']}")
        print(f"‚ùå Erros encontrados: {total_changes['errors']}")
        
        if total_changes["errors"] == 0:
            print("üéâ Todas as opera√ß√µes foram conclu√≠das com sucesso!")
        else:
            print("‚ö†Ô∏è  Algumas opera√ß√µes falharam. Verifique os logs acima.")
    
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  Opera√ß√£o interrompida pelo usu√°rio")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")
        if args.verbose:
            import traceback
            traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main()
