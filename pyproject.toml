[tool.poetry]
name = "verificacoes-github-splor-mg"
version = "0.1.0"
description = "GitHub Organization Management Tool"
authors = ["splor-mg"]
readme = "README.md"
packages = [{include = "scripts", from = "."}]

[tool.poetry.dependencies]
python = "^3.8.1"
requests = "^2.31.0"
PyYAML = "^6.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.0.0"
pytest-cov = "^4.0.0"
black = "^23.0.0"
flake8 = "^6.0.0"
mypy = "^1.0.0"
taskipy = "^1.14.1"

[tool.poetry.scripts]
github-org-manager = "main:main"

[tool.taskipy.tasks]
# Tasks para gerenciamento do GitHub
all = { cmd = "python main.py --all", help = "Executa todas as operações: sincroniza organização, lista repositórios e sincroniza labels" }
list-repos = { cmd = "python main.py --list-repos", help = "Lista todos os repositórios da organização e salva em docs/repos_list.csv" }
sync-repos = { cmd = "python main.py --sync-repos", help = "Sincroniza labels em todos os repositórios da organização (modo conservador)" }
sync-org = { cmd = "python main.py --sync-org", help = "Sincroniza labels padrão da organização GitHub" }
verbose = { cmd = "python main.py --verbose", help = "Executa com logs detalhados e verbosos" }

# Tasks de personalização avançada
sync-org-custom = { cmd = "python main.py --org", help = "Sincroniza organização específica (use: task sync-org-custom minha-org)" }
sync-repos-custom = { cmd = "python main.py --repos", help = "Sincroniza repositórios específicos (use: task sync-repos-custom repo1,repo2)" }
sync-labels-custom = { cmd = "python main.py --labels", help = "Usa arquivo de labels customizado (use: task sync-labels-custom /caminho/labels.yaml)" }
sync-delete-extras = { cmd = "python main.py --sync-repos --delete-extras", help = "Sincroniza labels e remove labels extras (modo completo)" }

# Tasks para projetos GitHub
projects-panels = { cmd = "python main.py --projects-panels", help = "Atualiza dados completos dos projetos GitHub (projects-panels.yml)" }
projects-list = { cmd = "python main.py --projects-list", help = "Atualiza lista de projetos GitHub (projects-panels-list.yml)" }
projects-update = { cmd = "python main.py --projects-panels --projects-list", help = "Atualiza ambos os arquivos de projetos" }

# Tasks para issues e campos de data
issues-close-date = { cmd = "python main.py --issues-close-date", help = "Gerencia campo Data Fim em projetos GitHub (últimos 7 dias)" }
issues-close-date-panel = { cmd = "python main.py --issues-close-date-panel", help = "Seleção interativa de projetos para gerenciar issues" }
issues-close-date-projects = { cmd = "python main.py --issues-close-date-projects", help = "Gerencia issues em projetos específicos (use: task issues-close-date-projects 1,2,3)" }
issues-close-date-field = { cmd = "python main.py --issues-close-date-field", help = "Usa campo customizado para issues (use: task issues-close-date-field 'Data Conclusão')" }
issues-close-date-days-30 = { cmd = "python main.py --issues-close-date --issues-days 30", help = "Processa issues dos últimos 30 dias" }
issues-close-date-days-90 = { cmd = "python main.py --issues-close-date --issues-days 90", help = "Processa issues dos últimos 90 dias" }
issues-close-date-all = { cmd = "python main.py --issues-close-date --issues-all", help = "Processa TODOS os issues (primeira execução)" }

# Tasks de otimização de consultas
issues-close-date-no-cache = { cmd = "python main.py --issues-close-date --issues-no-cache", help = "Processa issues sem cache (para debugging)" }
issues-close-date-batch-10 = { cmd = "python main.py --issues-close-date --issues-batch-repos 10", help = "Processa issues com lotes de 10 repositórios" }
issues-close-date-batch-15 = { cmd = "python main.py --issues-close-date --issues-batch-repos 15", help = "Processa issues com lotes de 15 repositórios" }
issues-close-date-optimized = { cmd = "python main.py --issues-close-date --issues-batch-repos 10 --issues-days 7", help = "Processa issues otimizado (lotes de 10, últimos 7 dias)" }
update-workflow-options = { cmd = "python scripts/update_workflow_options.py", help = "Atualiza opções de projetos no workflow GitHub Actions dinamicamente" }

# Tasks combinadas
projects-and-issues = { cmd = "python main.py --projects-panels --issues-panel", help = "Atualiza projetos e gerencia issues com seleção interativa" }
projects-and-issues-all = { cmd = "python main.py --projects-panels --issues-close-date --issues-all", help = "Atualiza projetos e processa TODOS os issues" }
projects-and-issues-30 = { cmd = "python main.py --projects-panels --issues-close-date --issues-days 30", help = "Atualiza projetos e processa issues dos últimos 30 dias" }
projects-and-issues-optimized = { cmd = "python main.py --projects-panels --issues-close-date --issues-batch-repos 10", help = "Atualiza projetos e processa issues otimizado (lotes de 10)" }
full-workflow = { cmd = "python main.py --all --projects-panels --issues-panel", help = "Executa workflow completo: labels, repositórios, projetos e issues" }
full-workflow-all-issues = { cmd = "python main.py --all --projects-panels --issues-close-date --issues-all", help = "Executa workflow completo processando TODOS os issues" }
full-workflow-optimized = { cmd = "python main.py --all --projects-panels --issues-close-date --issues-batch-repos 10", help = "Executa workflow completo otimizado (lotes de 10 repositórios)" }

# Tasks de setup
install-dev = "poetry install --with dev"
update-deps = "poetry update"
lock = "poetry lock"
install = "poetry install"

# Tasks de desenvolvimento
dev = "python main.py --all --verbose"
test = "pytest"
test-cov = "pytest --cov=scripts --cov-report=html"
format = "black ."
lint = "flake8 ."
type-check = "mypy ."
check-all = "task format && task lint && task type-check && task test"

# Tasks de limpeza
clean = "find . -type f -name '*.pyc' -delete && find . -type d -name '__pycache__' -delete && find . -type d -name '*.egg-info' -exec rm -rf {} +"
clean-logs = "rm -f *.log"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']

[tool.mypy]
python_version = "3.8.1"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "--cov=scripts --cov-report=term-missing --cov-report=html"
