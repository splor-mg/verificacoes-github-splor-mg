name: issue-closed-sync

on:
  issues:
    types: [closed]
  workflow_dispatch:
    inputs:
      update_project_list:
        description: 'Atualizar lista de projetos antes de executar?'
        required: false
        default: 'nÃ£o'
        type: choice
        options:
          - 'sim'
          - 'nÃ£o'
      organization:
        description: 'Organization name to sync issues for'
        required: true
        default: 'aid-pilot'
      project_number:
        description: "Project to sync issues for"
        required: true
        default: "13 - GestÃ£o Ã  Vista AID"
        type: choice
        options:
          - "13 - GestÃ£o Ã  Vista AID"
          - "1 - GestÃ£o Ã  Vista Pilot"
          - "2 - [TEMPLATE] GestÃ£o Ã  Vista AID"

      field_name:
        description: "Project Date field to set"
        required: true
        default: "Data Fim"

jobs:
  set-end-date:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: read
    env:
      GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      GITHUB_ORG: ${{ inputs.organization }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-3.11-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Activate Poetry environment
        run: |
          echo "POETRY_VENV_PATH=$(poetry env info --path)" >> $GITHUB_ENV
          echo "$(poetry env info --path)/bin" >> $GITHUB_PATH

      - name: Update projects data
        if: inputs.update_project_list == 'sim'
        run: |
          echo "ðŸ”„ Atualizando dados dos projetos..."
          poetry run python main.py --projects-panels --projects-list
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          GITHUB_ORG: ${{ inputs.organization }}

      - name: Update workflow options dynamically
        if: inputs.update_project_list == 'sim'
        run: |
          echo "ðŸ”„ Atualizando opÃ§Ãµes de projetos dinamicamente..."
          poetry run python scripts/update_workflow_options.py
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          GITHUB_ORG: ${{ inputs.organization }}

      - name: Commit and push project updates
        if: inputs.update_project_list == 'sim'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add docs/ .github/workflows/issues-close-date.yml
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update project options for ${{ inputs.organization }} [skip ci]"
            git push
          fi

      - name: Stop workflow after project update
        if: inputs.update_project_list == 'sim'
        run: |
          echo "âœ… Lista de projetos atualizada com sucesso!"
          echo "ðŸ’¡ Execute o workflow novamente com 'Atualizar lista de projetos' = 'NÃ£o' para gerenciar issues"
          exit 0

      - name: Extract project number from selection
        if: inputs.update_project_list == 'nÃ£o'
        id: extract_project
        run: |
          # Extrair nÃºmero do projeto da seleÃ§Ã£o (ex: "1 - GestÃ£o Ã  Vista Pilot" -> "1")
          PROJECT_SELECTION="${{ inputs.project_number }}"
          PROJECT_NUMBER=$(echo "$PROJECT_SELECTION" | cut -d' ' -f1)
          echo "project_number=$PROJECT_NUMBER" >> $GITHUB_OUTPUT
          echo "Selected project: $PROJECT_SELECTION (Number: $PROJECT_NUMBER)"

      - name: Sync Project field on issue close
        if: inputs.update_project_list == 'nÃ£o'
        run: |
          echo "ðŸ”§ Gerenciando campo '${{ inputs.field_name }}' para projeto ${{ steps.extract_project.outputs.project_number }}"
          poetry run python main.py \
            --issues-close-date \
            --issues-projects "${{ steps.extract_project.outputs.project_number }}" \
            --issues-field "${{ inputs.field_name }}" \
            --org "${{ inputs.organization }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          GITHUB_ORG: ${{ inputs.organization }}

      - name: Commit and push changes
        if: inputs.update_project_list == 'nÃ£o'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add docs/
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update projects data for ${{ inputs.organization }} [skip ci]"
            git push
          fi


